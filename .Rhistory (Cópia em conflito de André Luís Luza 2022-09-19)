axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic() +
scale_fill_viridis()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value, xend=0,
y=reorder(cor_pair, - value),
yend=reorder(cor_pair, - value)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic() +
scale_fill_viridis_d()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value, xend=0,
y=reorder(cor_pair, - value),
yend=reorder(cor_pair, - value)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
scale_fill_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value, xend=0,
y=reorder(cor_pair, - value),
yend=reorder(cor_pair, - value)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
$value
merged_cor$value
jitter (merged_cor$value)
jitter (merged_cor$value,0.01)
merged_cor$value
jitter (merged_cor$value,1)
# subtle jitter
merged_cor$value_jitter <- jitter (merged_cor$value,1)
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value_jitter,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value_jitter, xend=0,
y=reorder(cor_pair, - value_jitter),
yend=reorder(cor_pair, - value_jitter)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value_jitter,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value_jitter, xend=0,
y=reorder(cor_pair, - value_jitter),
yend=reorder(cor_pair, - value_jitter)),
color="grey") +
geom_point(size=4) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
# subtle jitter
merged_cor$value_jitter <- jitter (merged_cor$value,10)
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value_jitter,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value_jitter, xend=0,
y=reorder(cor_pair, - value_jitter),
yend=reorder(cor_pair, - value_jitter)),
color="grey") +
geom_point(size=4) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value, xend=0,
y=reorder(cor_pair, - value),
yend=reorder(cor_pair, - value)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value, xend=0,
y=reorder(cor_pair, - value),
yend=reorder(cor_pair, - value)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
merged_cor
# Change baseline
pdf()
# Change baseline
dev.off()
# Change baseline
dev.off()
pdf()
# Change baseline
ggplot(merged_cor[which(merged_cor$Correlation %in% c("Observed",
"Residual",
"Predicted")),],
aes(x=value,
y=cor_pair,
color = Correlation,
fill = Correlation,
group = cor_pair)) +
geom_segment( aes(x=value, xend=0,
y=reorder(cor_pair, - value),
yend=reorder(cor_pair, - value)),
color="grey",
position = position_jitter(height = 0.2, width = 0)) +
geom_point(size=4,
position = position_jitter(height = 0.2, width = 0)) +
scale_color_viridis_d()+
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank()
) +
xlab("Pearson's correlation") +
ylab ("Pairs of functional metrics")+
theme(legend.position = c(0.8,0.8)) +
geom_vline(aes(xintercept =0),alpha =0.5,size=1,col = "gray") +
xlim(c(-.5,.75)) +
theme_classic()
mcmc_areas(posterior, pars = c( # fish
"b_logFRicfish1_SR_fish",
"b_logRaofish1_SR_fish",
# algae
"b_logFRicalgae1_SR_algae",
"b_logRaoalgae1_SR_algae",
# corals
"b_logFRiccorals1_SR_corals",
"b_logRaocorals1_SR_corals"),
prob = 0.75, # 75% intervals
prob_outer = 0.95, # 95%
point_est = "median",
area_method = "equal height")
vars_ext<-get_variables(res$best_model[[1]])[grep("sst",get_variables(model))]
vars_ext<-get_variables(res$best_model[[1]])[grep("sst",get_variables(res$best_model[[1]]))]
vars_ext
# sst SR fish
model %>%
spread_draws(b_logFRicfish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logSR_sst),
prob_pos = sum(b_logSR_sst > 0) / n(),
prob_neg = sum(b_logSR_sst < 0) / n())
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logFRicfish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logSR_sst),
prob_pos = sum(b_logSR_sst > 0) / n(),
prob_neg = sum(b_logSR_sst < 0) / n())
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logFRicfish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logSR_sst),
prob_pos = sum(b_logFRicfish1_sst_std > 0) / n(),
prob_neg = sum(b_logFRicfish1_sst_std < 0) / n())
res$best_model[[1]]
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logFRicfish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logRaofish1_sst_std),
prob_pos = sum(b_logSR_sst > 0) / n(),
prob_neg = sum(b_logSR_sst < 0) / n())
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logRaofish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logRaofish1_sst_std),
prob_pos = sum(b_logSR_sst > 0) / n(),
prob_neg = sum(b_logSR_sst < 0) / n())
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logRaofish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logRaofish1_sst_std),
prob_pos = sum(b_logRaofish1_sst_std > 0) / n(),
prob_neg = sum(b_logRaofish1_sst_std < 0) / n())
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logFRicfish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logFRicfish1_sst_std),
prob_pos = sum(b_logFRicfish1_sst_std > 0) / n(),
prob_neg = sum(b_logFRicfish1_sst_std < 0) / n())
vars_ext
mcmc_areas(posterior, pars = c( # fish
"b_logFRicfish1_sst_std",
"b_logRaofish1_sst_std",
# algae
"b_logFRicalgae1_sst_std",
"b_logRaoalgae1_sst_std",
# corals
"b_logFRiccorals1_sst_std",
"b_logRaocorals1_sst_std"
),
prob = 0.75, # 50% intervals
prob_outer = 0.95, # 95%
point_est = "median",
area_method = "equal height")
mcmc_areas(posterior, pars = c( # fish
"b_logFRicfish1_sst_std",
"b_logRaofish1_sst_std",
# algae
"b_logFRicalgae1_sst_std",
"b_logRaoalgae1_sst_std",
# corals
"b_logFRiccorals1_sst_std",
"b_logRaocorals1_sst_std"
),
prob = c(0.5,0.07), # 50% intervals
prob_outer = 0.95, # 95%
point_est = "median",
area_method = "equal height")
mcmc_areas(posterior, pars = c( # fish
"b_logFRicfish1_sst_std",
"b_logRaofish1_sst_std",
# algae
"b_logFRicalgae1_sst_std",
"b_logRaoalgae1_sst_std",
# corals
"b_logFRiccorals1_sst_std",
"b_logRaocorals1_sst_std"
),
prob = 0.75, # 50% intervals
prob_outer = 0.95, # 95%
point_est = "median",
area_method = "equal height")
vars_ext
lapply (vars_ext, function (i)
# sst SR fish
res$best_model[[1]] %>%
spread_draws(i) %>%
dplyr::summarise(ggdist::median_hdci(i),
prob_pos = sum(i > 0) / n(),
prob_neg = sum(i < 0) / n())
)
vars_ext
vars_ext
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logFRicfish1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logFRicfish1_sst_std),
prob_pos = sum(b_logFRicfish1_sst_std > 0) / n(),
prob_neg = sum(b_logFRicfish1_sst_std < 0) / n())
# sst SR fish
res$best_model[[1]] %>%
spread_draws(b_logRaoalgae1_sst_std) %>%
dplyr::summarise(ggdist::median_hdci(b_logRaoalgae1_sst_std),
prob_pos = sum(b_logRaoalgae1_sst_std > 0) / n(),
prob_neg = sum(b_logRaoalgae1_sst_std < 0) / n())
## call packages
## call packages
source("R/packages.R")
source("R/functions.R")
### -------------------------
#  FIG - supporting information
# correlations between variables
load(here("output", "modeling_data.RData"))
## call packages
source("R/packages.R")
require(here)
citation()
## call packages
source("R/packages.R")
install.packages(c("crul", "distributional", "dplyr", "future", "gtable", "lpSolve", "magrittr", "phytools", "progressr", "rgbif", "rlang", "scatterpie", "stringi"))
library(betapart)
detach("package:betapart", unload = TRUE)
library(here)
## call packages
source("R/packages.R")
install.packages(c("crul", "distributional", "dplyr", "future", "gtable", "lpSolve", "rlang", "scatterpie"))
## call packages
source("R/packages.R")
install.packages("here")
## call packages
source("R/packages.R")
install.packages("lpSolve")
install.packages("here")
require(here)
here
here()
install.packages("ggplot2")
require(ggplot2)
.libPaths()
.libPaths(.libPaths()[2])
.libPaths()
require(here) ## para transitar entre pastas
.libPaths()
## call packages
source("R/packages.R")
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
require(here) ## para transitar entre pastas
install.packages("here")
require(here)
.libPaths()
require(here,library() = .libPaths()[2])
install.packages(here,library() = .libPaths()[2])
install.packages(here,library() = .libPaths()[2])
update.packages(checkBuilt=TRUE)
library(devtools)
install.packages("devtools")
library(devtools)
require(here) ## para transitar entre pastas
install.packages("here")
myPaths <- .libPaths()   #> get the paths
myPaths <- c(myPaths[2], myPaths[1])  #> switch them
.libPaths(myPaths)  # reassign them
install.packages("here")
require(here)
options(
repos = c(CRAN = "https://cran.rstudio.com/"),
browserNLdisabled = TRUE,
deparse.max.lines = 2)
require(here)
install.packages("here")
myPaths <- .libPaths()   #> get the paths
myPaths <- c(myPaths[2], myPaths[1])  #> switch them
.libPaths(myPaths)  # reassign them
.libPaths()
.libPaths()
.libPaths()
options(
repos = c(CRAN = "https://cran.rstudio.com/"),
browserNLdisabled = TRUE,
deparse.max.lines = 2)
# Set lib path
.libPaths( "~/R/x86_64-pc-linux-gnu-library/dev/" )
if (interactive()) {
suppressMessages(require(devtools))
}
.libPaths()
require(devtools)
install.packages("devtools")
require(devtools)
require(here)
require(here) ## para transitar entre pastas
require(here) ## para transitar entre pastas
require(devtools)
getwd()
## load packages and functions
source("R/packages.R")
source("R/functions.R")
ls()
require(here) ## para transitar entre pastas
install.packages("here", lib = )
.libPaths()
install.packages("here", lib = "C:/Usuários/Microsoft/AppData/Local/R/win-library/4.2")
require(here)
install.packages("here", lib = "C:\Microsoft")
install.packages("here", lib = "C:/Microsoft")
require(here)
Sys.getenv()
Sys.getenv("R_LIBS_USER")
require(here) ## para transitar entre pastas
install.packages("here", lib="C:/CustomR")
require(here)
install.packages("here", lib="C:/CustomR",dependencies=T)
require(here)
library(deldir)
library(here, lib.loc = "C:/CustomR")
library(here, lib.loc = "C:/Program Files/R/R-4.2.1/library")
